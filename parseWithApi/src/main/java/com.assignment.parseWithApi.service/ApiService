package com.assignment.parseWithApi.service;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;

import com.assignment.parseWithApi.vo.OptionListVo;
import com.assignment.parseWithApi.vo.ResultVo;
import com.assignment.parseWithApi.vo.RootVo;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

@Service
public class ApiService {
	
	
	public List<RootVo> getResult(String rqstURL) throws IOException {
		
		List<RootVo> 		resultList 		=	 new ArrayList<>();

		HttpURLConnection 	conn 			= 	 null;
		InputStream  		inputStream 	= 	 null;
		BufferedReader		reader 			= 	 null;
		
		try {
			
			URL url = new URL(rqstURL);
			conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod("GET");
			
			conn.setConnectTimeout(10000);
			conn.setReadTimeout(10000);
			
			int responseCode = conn.getResponseCode();
			System.out.print("응답코드 : " + responseCode + "\n" +
							 "응답메시지 : " + conn.getResponseMessage() + "\n");
			if(responseCode != HttpURLConnection.HTTP_OK) {
				
				throw new RuntimeException("HTTP 에러코드 : " + conn.getResponseCode());
				
			}
				
//			if(conn instanceof HttpURLConnection) {
//				System.out.println("가능");
//			} else { System.out.println("불가능"); }

			inputStream = conn.getInputStream();
            reader = new BufferedReader(new InputStreamReader(inputStream));
            StringBuilder responseBuilder = new StringBuilder();
            String line = "";
//            String result = "";
            while(  (line = reader.readLine()) != null  ) {
//            	result = result.concat(line);
//            	System.out.println("result : \n" + result);
                responseBuilder.append(line);
            }
			String responseJson = responseBuilder.toString();
			System.out.println("responseJson : \n" + responseJson);
			
			ObjectMapper objectMapper = new ObjectMapper();
			JsonNode resultNode = objectMapper.readTree(responseJson);
			if(resultNode.isArray()) {
				for(JsonNode node : resultNode) {
					RootVo rootVo = objectMapper.treeToValue(node, RootVo.class);
					resultList.add(rootVo);
				}
			}
			
//			// 받아온 JSON 데이터를 Java 객체로 매핑하는 코드
//			ObjectMapper objectMapper = new ObjectMapper();
			RootVo rootVo = objectMapper.readValue(responseJson, RootVo.class);

			// 매핑된 Java 객체를 리스트에 추가
			resultList.add(rootVo);
			System.out.println("resultList : " + resultList.toString());
			
		} catch(Exception e) {
			
			e.printStackTrace();
			System.out.println("error : " + e);
			
		} finally {
			
			if(reader != null) {
				
                reader.close();
                
            }
			
			if(inputStream != null) {
			
				inputStream.close();
			
			}
			
			if(conn != null) {
			
				conn.disconnect();
			
			}
		}
		
		return resultList;
	}
	
}
